#!/usr/bin/env ruby

lib = File.expand_path("../lib", __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

STDOUT.sync = true

require "bundler/setup"
require "topological_inventory/ansible_tower/cloud/collector"
require "topological_inventory/ansible_tower/receptor/collector"
require "topological_inventory/ansible_tower/collectors_pool"
require "topological_inventory/ansible_tower/collector/scheduler"
require "topological_inventory/ansible_tower/collector/metrics"

def parse_args
  require 'optimist'
  Optimist.options do
    opt :config, "Sources configuration YAML file",
        :type => :string, :default => ENV["CONFIG"]
    opt :source, "Inventory Source UID",
        :type => :string, :default => ENV["SOURCE_UID"]
    opt :scheme, "Protocol scheme for connecting to the AnsibleTower REST API, default: https",
        :type => :string, :default => ENV["ENDPOINT_SCHEME"] || 'https'
    opt :host, "IP address or hostname of the Ansible Tower REST API",
        :type => :string, :default => ENV["ENDPOINT_HOST"]
    opt :port, "Port for Ansible Tower REST API",
        :type => :integer, :default => (ENV["ENDPOINT_PORT"]&.to_i || 443)
    opt :user, "Username to AnsibleTower",
        :type => :string, :default => ENV["AUTH_USERNAME"]
    opt :password, "Password to Ansible Tower",
        :type => :string, :default => ENV["AUTH_PASSWORD"]
    opt :ingress_api, "Hostname of the ingress-api route",
        :type => :string, :default => ENV["INGRESS_API"] || "http://localhost:9292"
    opt :metrics_port, "Port to expose the metrics endpoint on, 0 to disable metrics",
        :type => :integer, :default => (ENV["METRICS_PORT"] || 9394).to_i
    opt :receptor_controller_scheme, "Receptor Controller scheme", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_SCHEME"] || "http"
    opt :receptor_controller_host, "Receptor Controller host", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_HOST"] || "localhost"
    opt :receptor_controller_port, "Receptor Controller port", :type => :integer, :default => (ENV["RECEPTOR_CONTROLLER_PORT"] || 9090).to_i
    opt :receptor_controller_psk, "Pre shared key for auth with receptor controller", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_PSK"]
    opt :receptor_node, "Name of endpoint's receptor node",
        :type => :string, :default => ENV["RECEPTOR_NODE"]
    opt :account_number, "Account number for receptor controller's x-rh-identity header",
        :type => :string, :default => ENV["ACCOUNT_NUMBER"]
    opt :queue_host, "Kafka messaging: hostname or IP",
        :type => :string, :default => ENV["QUEUE_HOST"] || "localhost"
    opt :queue_port, "Kafka messaging: port",
        :type => :integer, :default => ENV["QUEUE_PORT"]&.to_i || 9092
    opt :page_size, "Default request page size",
        :type => :integer, :default => (ENV["PAGE_SIZE"] || 100).to_i
  end
end

# Params for single-source mode and multi-source mode are mutually exclusive
def check_mode(opts)
  cloud_source_args = %i[source host user password]
  on_premise_source_args = %i[source receptor_controller_scheme receptor_controller_host receptor_controller_port receptor_node]
  if opts[:config].nil?
    to_check = opts[:receptor_node].present? ? on_premise_source_args : cloud_source_args
    to_check.each do |arg|
      Optimist.die arg, "can't be nil" if opts[arg].nil?
      Optimist.die arg, "can't be zero" if arg.to_s.index('port').present? && opts[arg].zero?
    end
  else
    Optimist.die :config, "not applicable in single-source mode" if cloud_source_args.any? { |arg| opts[arg].present? }
  end
end

args = parse_args

check_mode(args)

ingress_api_uri = URI(args[:ingress_api])

TopologicalInventoryIngressApiClient.configure.scheme = ingress_api_uri.scheme || "http"
TopologicalInventoryIngressApiClient.configure.host   = "#{ingress_api_uri.host}:#{ingress_api_uri.port}"

ReceptorController::Client.configure do |config|
  config.controller_scheme = args[:receptor_controller_scheme]
  config.controller_host   = "#{args[:receptor_controller_host]}:#{args[:receptor_controller_port]}"
  config.queue_host        = args[:queue_host]
  config.queue_port        = args[:queue_port]
  config.pre_shared_key    = args[:receptor_controller_psk]
end

TopologicalInventory::AnsibleTower::Collector::Scheduler.configure do |config|
  config.full_refresh_frequency = (ENV['COLLECTOR_FULL_REFRESH_FREQUENCY'] || 3600).to_i
  config.partial_refresh_frequency = (ENV['COLLECTOR_PARTIAL_REFRESH_FREQUENCY'] || ENV['COLLECTOR_POLL_TIME'] || 300).to_i
end


metrics = TopologicalInventory::AnsibleTower::Collector::Metrics.new(args[:metrics_port])
if args[:config].nil?
  collector = if args[:receptor_node].blank?
                TopologicalInventory::AnsibleTower::Cloud::Collector.new(args[:source],
                                                                         "#{args[:scheme]}://#{args[:host]}:#{args[:port]}",
                                                                         args[:user], args[:password],
                                                                         metrics,
                                                                         :default_limit => args[:page_size])
              else
                TopologicalInventory::AnsibleTower::Receptor::Collector.new(args[:source],
                                                                            args[:receptor_node],
                                                                            args[:account_number],
                                                                            metrics,
                                                                            :default_limit => args[:page_size])
              end

  scheduler = TopologicalInventory::AnsibleTower::Collector::Scheduler.default
  scheduler.add_source(args[:source])
else
  pool = TopologicalInventory::AnsibleTower::CollectorsPool.new(args[:config], metrics, :default_limit => args[:page_size])
end

Signal.trap("TERM") do
  metrics&.stop_server
  pool&.stop!
  if args[:receptor_node].present?
    TopologicalInventory::AnsibleTower::ConnectionManager.stop_receptor_client
  end
  exit
end

if args[:config].nil?
  collector.collect!
else
  pool.run!
end
