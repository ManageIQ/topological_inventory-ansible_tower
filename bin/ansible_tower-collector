#!/usr/bin/env ruby

lib = File.expand_path("../lib", __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

STDOUT.sync = true

require "bundler/setup"
require "topological_inventory/ansible_tower/collector"
require "topological_inventory/ansible_tower/collectors_pool"
require "topological_inventory/ansible_tower/collector/application_metrics"

#
# You can add local requires to /lib/require.dev.rb
#
require_dev_path = File.join(lib, "require.dev.rb")
require require_dev_path if File.exist?(require_dev_path)

#
# Input args
# --config      (ENV["CONFIG"])          - Config file name (without .yml suffix) - file located in "config" dir.
# --source      (ENV["SOURCE_UID"])      - core: Source.uid (manager for this collector)
# --scheme      (ENV["ENDPOINT_SCHEME"]) - ansible tower scheme, https by default
# --host        (ENV["ENDPOINT_HOST"])   - ansible tower url
# --user        (ENV["AUTH_USERNAME"])   - credentials: username
# --password    (ENV["AUTH_PASSWORD"])   - credentials: password
# --ingress-api (ENV["INGRESS_API"])     - ingress api server, by default *localhost:9292*
# --metrics-port(ENV["METRICS_PORT"])    - Prometheus metrics port, default *9394*, disabled when *0*
#
def parse_args
  require 'optimist'
  Optimist.options do
    opt :config, "Sources configuration YAML file",
        :type => :string, :default => ENV["CONFIG"]
    opt :source, "Inventory Source UID",
        :type => :string, :default => ENV["SOURCE_UID"]
    opt :scheme, "Protocol scheme for connecting to the AnsibleTower REST API, default: https",
        :type => :string, :default => ENV["ENDPOINT_SCHEME"] || 'https'
    opt :host, "IP address or hostname of the Ansible Tower REST API",
        :type => :string, :default => ENV["ENDPOINT_HOST"]
    opt :user, "Username to AnsibleTower",
        :type => :string, :default => ENV["AUTH_USERNAME"]
    opt :password, "Password to Ansible Tower",
        :type => :string, :default => ENV["AUTH_PASSWORD"]
    opt :ingress_api, "Hostname of the ingress-api route",
        :type => :string, :default => ENV["INGRESS_API"] || "http://localhost:9292"
    opt :metrics_port, "Port to expose the metrics endpoint on, 0 to disable metrics",
        :type => :integer, :default => (ENV["METRICS_PORT"] || 9394).to_i
    opt :receptor_node_id, "ID of on-premise Receptor Node",
        :type => :string, :default => ENV["RECEPTOR_NODE_ID"]
    opt :proxy_scheme, "Proxy scheme",
        :type => :string, :default => ENV["PROXY_SCHEME"] || 'http'
    opt :proxy_host, "Proxy host",
        :type => :string, :default => ENV["PROXY_HOST"]
  end
end

# Params for single-source mode and multi-source mode are mutually exclusive
def check_mode(opts)
  single_source_args = %i[source host user password]
  if opts[:config].nil?
    single_source_args.each do |arg|
      Optimist::die arg, "can't be nil" if opts[arg].nil?
    end
  else
    Optimist::die :config, "not applicable in single-source mode" if single_source_args.any? { |arg| opts[arg].present? }
  end
end

args = parse_args

check_mode(args)

ingress_api_uri = URI(args[:ingress_api])

TopologicalInventoryIngressApiClient.configure.scheme = ingress_api_uri.scheme || "http"
TopologicalInventoryIngressApiClient.configure.host   = "#{ingress_api_uri.host}:#{ingress_api_uri.port}"

begin
  metrics = TopologicalInventory::AnsibleTower::Collector::ApplicationMetrics.new(args[:metrics_port])
  if args[:config].nil?
    collector = TopologicalInventory::AnsibleTower::Collector.new(args[:source],
                                                                  "#{args[:scheme]}://#{args[:host]}",
                                                                  args[:user], args[:password],
                                                                  metrics,
                                                                  :proxy_hostname => "#{args[:proxy_scheme]}://#{args[:proxy_host]}",
                                                                  :receptor_node_id => args[:receptor_node_id])
    collector.collect!
  else
    pool = TopologicalInventory::AnsibleTower::CollectorsPool.new(args[:config], metrics)
    pool.run!
  end
ensure
  pool&.stop!
  metrics&.stop_server
end
