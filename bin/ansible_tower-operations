#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path("../lib", __dir__)
require "bundler/setup"
require "active_support/core_ext/object/blank"
require "optimist"
require "topological_inventory/ansible_tower/operations/worker"

def parse_args
  Optimist.options do
    opt :queue_host, "Kafka messaging: hostname or IP", :type => :string, :default => ENV["QUEUE_HOST"] || "localhost"
    opt :queue_port, "Kafka messaging: port", :type => :integer, :default => (ENV["QUEUE_PORT"] || 9092).to_i

    opt :receptor_controller_scheme, "Receptor Controller scheme", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_SCHEME"] || "http"
    opt :receptor_controller_host, "Receptor Controller host", :type => :string, :default => ENV["RECEPTOR_CONTROLLER_HOST"]
    opt :receptor_controller_port, "Receptor Controller port", :type => :integer, :default => ENV["RECEPTOR_CONTROLLER_PORT"].to_i

    opt :sources_scheme, "Sources API scheme", :type => :string, :default => ENV["SOURCES_SCHEME"] || "http"
    opt :sources_host, "Sources API host name", :type => :string, :default => ENV["SOURCES_HOST"]
    opt :sources_port, "Sources API port", :type => :integer, :default => ENV["SOURCES_PORT"].to_i

    opt :topological_scheme, "Topological Inventory API scheme", :type => :string, :default => ENV["TOPOLOGICAL_INVENTORY_API_SERVICE_SCHEME"] || "http"
    opt :topological_host, "Topological Inventory API host name", :type => :string, :default => ENV["TOPOLOGICAL_INVENTORY_API_SERVICE_HOST"]
    opt :topological_port, "Topological Inventory API port", :type => :integer, :default => ENV["TOPOLOGICAL_INVENTORY_API_SERVICE_PORT"].to_i
  end
end

def check_args(args)
  (args.keys - %i[help]).each do |arg|
    Optimist.die arg, "can't be blank" if args[arg].blank?
    Optimist.die arg, "can't be zero" if arg.to_s.index('port').present? && args[arg].zero?
  end
end

args = parse_args
check_args(args)

TopologicalInventoryApiClient.configure do |config|
  config.scheme = args[:topological_scheme]
  config.host = "#{args[:topological_host]}:#{args[:topological_port]}"
  config.params_encoding = :rack # needed for {:filter => {:id => [1,2,3]}}
end

SourcesApiClient.configure do |config|
  config.scheme = args[:sources_scheme] || "http"
  config.host   = "#{args[:sources_host]}:#{args[:sources_port]}"
end

ReceptorController::Client.configure do |config|
  config.controller_scheme          = args[:receptor_controller_scheme]
  config.controller_host            = "#{args[:receptor_controller_host]}:#{args[:receptor_controller_port]}"
  config.queue_host                 = args[:queue_host]
  config.queue_port                 = args[:queue_port]
  config.response_timeout           = 10.seconds # TODO: too fast?
  config.response_timeout_poll_time = 1.second   # TODO: too fast?
end

begin
  operations_worker = TopologicalInventory::AnsibleTower::Operations::Worker.new(:host => args[:queue_host], :port => args[:queue_port])
  operations_worker.run
rescue => err
  puts err
  raise
end
